name: Update API Data

on:
  schedule:
    # Run daily at 2:00 AM UTC
    - cron: '0 2 * * *'
  workflow_dispatch: # Allow manual triggering

jobs:
  update-data:
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout repository
      uses: actions/checkout@v4
      with:
        token: ${{ secrets.GITHUB_TOKEN }}
    
    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: '3.11'
    
    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install requests
    
    - name: Update GitHub Profile Data
      run: |
        python -c "
        import requests
        import json
        import datetime
        
        # GitHub API endpoint for user profile
        username = 'rahul-challa'
        api_url = f'https://api.github.com/users/{username}'
        
        # Make request to GitHub API
        response = requests.get(api_url)
        if response.status_code == 200:
            user_data = response.json()
            
            # Get repositories
            repos_response = requests.get(f'{api_url}/repos?per_page=100&sort=updated')
            if repos_response.status_code == 200:
                user_data['repositories'] = repos_response.json()
            
            # Get followers list
            followers_response = requests.get(f'{api_url}/followers?per_page=100')
            if followers_response.status_code == 200:
                user_data['followers_list'] = followers_response.json()
            
            # Create final data structure
            final_data = {
                'lastUpdated': datetime.datetime.now().isoformat(),
                'data': user_data
            }
            
            # Write to file
            with open('data/github-profile.json', 'w') as f:
                json.dump(final_data, f, indent=2)
            
            print('GitHub profile data updated successfully')
        else:
            print(f'Failed to fetch GitHub data: {response.status_code}')
            exit(1)
        "
    
    - name: Update LeetCode Calendar Data
      run: |
        python -c "
        import requests
        import json
        import datetime
        
        # LeetCode API endpoint
        username = 'Rahul_Challa'
        api_url = f'https://alfa-leetcode-api.onrender.com/{username}/calendar'
        
        # Make request to LeetCode API
        response = requests.get(api_url)
        if response.status_code == 200:
            data = response.json()
            
            # Create final data structure
            final_data = {
                'lastUpdated': datetime.datetime.now().isoformat(),
                'data': data,
                'apiSource': api_url,
                'responseHeaders': dict(response.headers),
                'responseStatus': response.status_code,
                'requestUrl': api_url
            }
            
            # Write to file
            with open('data/leetcode-calendar.json', 'w') as f:
                json.dump(final_data, f, indent=2)
            
            print('LeetCode calendar data updated successfully')
        else:
            print(f'Failed to fetch LeetCode calendar data: {response.status_code}')
            exit(1)
        "
    
    - name: Update LeetCode Contest Data
      run: |
        python -c "
        import requests
        import json
        import datetime
        
        # LeetCode API endpoint for contest data
        username = 'Rahul_Challa'
        api_url = f'https://alfa-leetcode-api.onrender.com/{username}/contest'
        
        # Make request to LeetCode API
        response = requests.get(api_url)
        if response.status_code == 200:
            data = response.json()
            
            # Create final data structure
            final_data = {
                'lastUpdated': datetime.datetime.now().isoformat(),
                'data': data,
                'apiSource': api_url,
                'responseHeaders': dict(response.headers),
                'responseStatus': response.status_code,
                'requestUrl': api_url
            }
            
            # Write to file
            with open('data/leetcode-contest.json', 'w') as f:
                json.dump(final_data, f, indent=2)
            
            print('LeetCode contest data updated successfully')
        else:
            print(f'Failed to fetch LeetCode contest data: {response.status_code}')
            exit(1)
        "
    
    - name: Update LeetCode History Data
      run: |
        python -c "
        import requests
        import json
        import datetime
        
        # LeetCode API endpoint for history data
        username = 'Rahul_Challa'
        api_url = f'https://alfa-leetcode-api.onrender.com/{username}/history'
        
        # Make request to LeetCode API
        response = requests.get(api_url)
        if response.status_code == 200:
            data = response.json()
            
            # Create final data structure
            final_data = {
                'lastUpdated': datetime.datetime.now().isoformat(),
                'data': data,
                'apiSource': api_url,
                'responseHeaders': dict(response.headers),
                'responseStatus': response.status_code,
                'requestUrl': api_url
            }
            
            # Write to file
            with open('data/leetcode-history.json', 'w') as f:
                json.dump(final_data, f, indent=2)
            
            print('LeetCode history data updated successfully')
        else:
            print(f'Failed to fetch LeetCode history data: {response.status_code}')
            exit(1)
        "
    
    - name: Update TexMex Package Data
      run: |
        python -c "
        import requests
        import json
        import datetime
        
        # NPM API endpoint for TexMex package
        package_name = 'texmex'
        api_url = f'https://registry.npmjs.org/{package_name}'
        
        # Make request to NPM API
        response = requests.get(api_url)
        if response.status_code == 200:
            data = response.json()
            
            # Extract latest version info
            latest_version = data.get('dist-tags', {}).get('latest')
            latest_data = data.get('versions', {}).get(latest_version, {})
            
            # Create final data structure
            final_data = {
                'lastUpdated': datetime.datetime.now().isoformat(),
                'data': {
                    'installs': None,  # NPM doesn't provide install count in registry API
                    'version': latest_version,
                    'rating': None,  # NPM doesn't provide ratings
                    'ratingCount': None,
                    'publisher': latest_data.get('publisher', {}).get('name'),
                    'displayName': latest_data.get('displayName'),
                    'description': latest_data.get('description'),
                    'categories': latest_data.get('categories', []),
                    'tags': latest_data.get('keywords', []),
                    'repository': latest_data.get('repository', {}).get('url'),
                    'homepage': latest_data.get('homepage'),
                    'bugs': latest_data.get('bugs', {}).get('url'),
                    'license': latest_data.get('license'),
                    'engines': latest_data.get('engines', {}),
                    'icon': latest_data.get('icon'),
                    'galleryBanner': latest_data.get('galleryBanner', {}),
                    'preview': latest_data.get('preview', False),
                    'public': True
                },
                'apiSource': api_url,
                'responseHeaders': dict(response.headers),
                'responseStatus': response.status_code
            }
            
            # Write to file
            with open('data/texmex-badges.json', 'w') as f:
                json.dump(final_data, f, indent=2)
            
            print('TexMex package data updated successfully')
        else:
            print(f'Failed to fetch TexMex package data: {response.status_code}')
            # Don't exit on failure for this one as it's less critical
        "
    
    - name: Commit and push changes
      run: |
        git config --local user.email "action@github.com"
        git config --local user.name "GitHub Action"
        
        # First, pull the latest changes to avoid conflicts
        git pull origin main
        
        # Check if there are changes to commit
        git add data/
        if git diff --staged --quiet; then
          echo "No changes to commit"
        else
          # Commit the changes
          git commit -m "Update API data - $(date -u +'%Y-%m-%d %H:%M:%S UTC')"
          
          # Push the changes
          git push origin main
        fi
