name: Update API Data Daily

on:
  schedule:
    - cron: '0 2 * * *'   # daily at 02:00 UTC
  workflow_dispatch:

# Requires: Settings → Actions → General → Workflow permissions → Read and write
# (If branch is protected, allow GitHub Actions to push or switch to PR flow.)

permissions:
  contents: write
  pull-requests: write

concurrency:
  group: api-data-update-${{ github.ref }}
  cancel-in-progress: false

jobs:
  update-data:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
        with:
          fetch-depth: 0          # we need history for rebase

      - name: Set up Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '18'

      - name: Install dependencies
        run: npm install axios

      - name: Create update script
        run: |
          cat > update-data.js << 'EOF'
          const axios = require('axios');
          const fs = require('fs').promises;

          async function ensureDataDir() {
            await fs.mkdir('data', { recursive: true }).catch(() => {});
          }

          async function updateGitHubData() {
            try {
              const profileResponse = await axios.get('https://api.github.com/users/rahul-challa', {
                headers: { 'Accept': 'application/vnd.github.v3+json', 'User-Agent': 'Portfolio-Data-Updater' },
                timeout: 15000
              });
              const profileData = profileResponse.data;

              try {
                const reposResponse = await axios.get('https://api.github.com/users/rahul-challa/repos?per_page=100&sort=updated', {
                  headers: { 'Accept': 'application/vnd.github.v3+json', 'User-Agent': 'Portfolio-Data-Updater' },
                  timeout: 15000
                });
                profileData.repositories = reposResponse.data;
              } catch (e) { console.warn('repos fetch failed:', e.message); }

              try {
                const followersResponse = await axios.get('https://api.github.com/users/rahul-challa/followers?per_page=100', {
                  headers: { 'Accept': 'application/vnd.github.v3+json', 'User-Agent': 'Portfolio-Data-Updater' },
                  timeout: 15000
                });
                profileData.followers_list = followersResponse.data;
              } catch (e) { console.warn('followers fetch failed:', e.message); }

              const out = {
                lastUpdated: new Date().toISOString(),
                data: profileData
              };
              await fs.writeFile('data/github-profile.json', JSON.stringify(out, null, 2));
              console.log('GitHub data updated');
            } catch (e) {
              console.error('GitHub data update failed:', e.message);
            }
          }

          async function updateLeetCodeData() {
            const user = 'Rahul_Challa';
            const apis = [
              'https://alfa-leetcode-api.onrender.com',
              'https://leetcode-stats-api.herokuapp.com',
              'https://leetcode-api.cyclic.app'
            ];
            for (const base of apis) {
              try {
                const common = { timeout: 15000, headers: { 'User-Agent': 'Portfolio-Data-Updater' } };

                try {
                  const r = await axios.get(`${base}/userContestRankingInfo/${user}`, common);
                  await fs.writeFile('data/leetcode-contest.json', JSON.stringify({ lastUpdated: new Date().toISOString(), data: r.data }, null, 2));
                } catch (e) { console.warn('contest failed @', base, e.message); }

                try {
                  const r = await axios.get(`${base}/${user}/contest/history`, common);
                  await fs.writeFile('data/leetcode-history.json', JSON.stringify({ lastUpdated: new Date().toISOString(), data: r.data }, null, 2));
                } catch (e) { console.warn('history failed @', base, e.message); }

                try {
                  const r = await axios.get(`${base}/${user}/calendar`, common);
                  await fs.writeFile('data/leetcode-calendar.json', JSON.stringify({ lastUpdated: new Date().toISOString(), data: r.data }, null, 2));
                } catch (e) { console.warn('calendar failed @', base, e.message); }

                console.log('LeetCode data updated via', base);
                break; // stop after first successful API
              } catch (e) {
                console.warn('LeetCode base failed:', base, e.message);
              }
            }
          }

          async function updateTexMexData() {
            try {
              const endpoints = [
                'https://marketplace.visualstudio.com/_apis/public/gallery/publishers/RahulChalla/extensions/texmex/latest',
                'https://marketplace.visualstudio.com/_apis/public/gallery/extensionquery',
                'https://marketplace.visualstudio.com/_apis/public/gallery/publishers/RahulChalla/extensions/texmex'
              ];
              let pkg = null;

              for (const ep of endpoints) {
                try {
                  if (ep.includes('extensionquery')) {
                    const r = await axios.post(ep, {
                      filters: [{ criteria: [{ filterType: 7, value: 'RahulChalla.texmex' }] }],
                      flags: 0x1
                    }, { headers: { 'Accept': 'application/json', 'Content-Type': 'application/json' }, timeout: 15000 });
                    if (r.status === 200 && r.data?.results?.[0]?.extensions?.[0]) {
                      pkg = r.data.results[0].extensions[0];
                      break;
                    }
                  } else {
                    const r = await axios.get(ep, { headers: { 'Accept': 'application/json' }, timeout: 15000 });
                    if (r.status === 200) { pkg = r.data; break; }
                  }
                } catch { /* try next */ }
              }

              if (pkg) {
                await fs.writeFile('data/texmex-badges.json', JSON.stringify({
                  lastUpdated: new Date().toISOString(),
                  data: pkg
                }, null, 2));
                console.log('TexMex data updated');
              } else {
                console.warn('VS Code Marketplace endpoints failed');
              }
            } catch (e) {
              console.error('TexMex update failed:', e.message);
            }
          }

          (async () => {
            await ensureDataDir();
            await updateGitHubData();
            await updateLeetCodeData();
            await updateTexMexData();
            console.log('All data tasks complete');
          })();
          EOF

      - name: Run update script
        run: node update-data.js

      - name: Check for changes
        id: check_changes
        run: |
          if git diff --quiet && git diff --staged --quiet; then
            echo "no_changes=true" >> $GITHUB_OUTPUT
            echo "No changes detected"
          else
            echo "no_changes=false" >> $GITHUB_OUTPUT
            echo "Changes detected"
            git status --porcelain
          fi

      - name: Commit & rebase & push
        if: steps.check_changes.outputs.no_changes == 'false'
        run: |
          BRANCH='${{ github.ref_name }}'

          git config user.email "41898282+github-actions[bot]@users.noreply.github.com"
          git config user.name  "github-actions[bot]"

          git add data/
          git commit -m "Update API data - $(date -u +'%Y-%m-%d %H:%M:%S UTC')" || echo "Nothing to commit"

          # Rebase on latest remote to avoid non-FF push rejections
          git fetch origin "${BRANCH}"
          git config --global rebase.autoStash true
          git pull --rebase origin "${BRANCH}"

          git push origin HEAD:"${BRANCH}"

      - name: Done (no changes)
        if: steps.check_changes.outputs.no_changes == 'true'
        run: echo "Workflow completed (no changes)"